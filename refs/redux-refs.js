/* 
Redux

Redux имеет только один store
store - не должен содержать логики. Отвечает за стейт приложения
actions - отправляются и обрабатываются непосредственно в store.
    Описывают изменения которые необходимо сделать. Являются 
    единственным способом изменения стейта.
store передает в action функции изменяющие state. Эти функции 
    называются reducers
reducer - функция, изменяющая стейт, на основе запрошенного action. 
    Никогда не меняют state, так как он неизменяемый. Вместо этого 
    они создают новый стейт с необходимыми изменениями
middleware - обрабатывает различные задачи. Действует подобно 
    reducer'ам, но способен модифицировать, остановить или добавить 
    действия
state - хранит в себе все состояние приложения. Облегчает отладку,
    сериализацию и разработку

ТЕРМИНОЛОГИЯ

action и action creators
В большинстве случае action не более чем обычный объект. Например:
    {
        type: 'INCREMENT',
        payload: {
            counterId: 'main',
            amount: -10
        }
    }
Для многократного исползования подобные объекты оборачивают в функции
Пример:
    function incrementAction(counterId, amount) {
        return ({
            type: 'INCREMENT',
            payload: { counterId, amount }
        })
    }
Такие функции называются action creators

reducers
Редьюсеры создают новый стейт с необходимыми изменениями. Для чтобы 
понимать какие изменения необходимо сделать используются функции
передающие текущий стейт и принимающие экшн-функцию. Пример:
function calculateNextState(currentState, action) {
    ...
    return nextState;
}
В реальности всегда есть один редьюсер верхнего уровня - root reducer,
вызывающий дополнительные редьюсеры для вычисления вложенных стейтов.
Пример:
function rootReducer(state, action) {
    switch (action.type) {
        case 'INCREMENT':
            return { ...state, state.counter + action.payload.amount };
        default:
            return state;
    }
}

middleware
Более продвинутая часть redux. они имеют доступ к actions, dispatch
функциям и к store - они являются более разносторонними и мощными 
сущностями в Redux.

store
Хранит в себе информацию приложения, но не пользовательскую логику
Задача store - принять action и передать его зарегистрированному 
middleware и затем использовать reducer чтобы вычислить новый state
и сохранить его.

*/